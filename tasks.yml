Question1:
  background: |
    Statements have the form:
    >> variable = expression
    Equality "=" implies the assignment of the expression to the variable. The command prompt
    is represented by two right arrows ">>"
    The assignment of value 1 to the variable a is executed after the enter key is pressed.
    >> a = 1
    You can observe that after the assignment, the value that is stored in the variable is printed
    on the screen. Printing all the values of all the variables can affect a lot the speed of
    execution of your program. To suppress the output of any assignment or result, use the semicolon (;)
    in a statement
    >> a = 1; #Does not print any result. Now try it yourself.
  question: Define a variable "a" with the value "56"
  type: commands
  evaluation: ['exist(''a'',''var'')', 'a==56']
  preeval: [clear('a')]
  posteval: [clear('a')]
Question2:
  background: |
    In MATLAB (and in mathematics in general) there is a difference between a row (line) and a column vector.
    It is very important to define the correct type of vector each time, because calculations can
    be wrong otherwise. To define a vector, we use the square brackets '[' (to denote the beginning of the vector) and ']'
    (to denote the end of the vector). The numbers we place between the brackets are the vector elements. For a row vector the
    element can be separated either by spaces or by commas.

    >> t = [1 2 3 4 5 6 7 8];
    >> k = [1,2,3,4,5,6,7,8];

    Row vectors t and k are identical. Let's try to make a row vector
  question: Define a row vector 'm' with 8 random elements
  type: commands
  evaluation: ['exist(''m'',''var'')', 'size(m)==[1,8]']
  preeval: [clear('m')]
  posteval: [clear('m')]
Question3:
  background: |
    To define column vectores, the syntax is very similar. Instead of using spaces or commas, you
    need to use semicolons (;) to separate the elements.

    >> c = [1;2;3;4;5;6;7;8];

    This results in a vector that looks like this:
    c=[1
    2
    3
    4
    5
    6
    7
    8]
    Do you think you are ready to define your first column element?
  question: Define a column vector 'p' with exactly 6 elements
  type: commands
  evaluation: ['exist(''p'',''var'')', 'size(p)==[6,1]']
  preeval: [clear('p')]
  posteval: [clear('p')]
Question4:
    background: |
      Sometimes, we need several sequences of numbers for our MATLAB programs. When you need a very
      big sequence of numbers, it is unpractical to type all the numbers by hand. Luckily MATLAB has
      a quick way to generate them, using the colon symbol (:)
      You can create a sequence of integers by specifying the first and last integer, separated by a
      colon

      >> 1:20
      ans =
        1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20

      By default, the sequence is created by incrementing by 1, but different increments can be chosen.
      Simply sandwich the increment that you want between the first and last value, and separate by a colon.

      >> 1:5:20
      ans =
        1 5 10 15 20

      You can also use a decimal or a negative number as an increment!
      Go ahead and try it!
    question: Define a row vector 'b' with numbers from 4 until 52 with an increment of 8
    type: commands
    evaluation: ['exist(''b'',''var'')','b==4:8:52']
    preeval: [clear('b')]
    posteval: [clear('b')]
Question5:
    background: |
      Creating vectors and sequences are not all that we want to do in MATLAB. We need to operate on them.
      You can do several things with vectors, such as add values to them. As in mathematics, if we add
      a value to a vector, this value is actually added on each of the elements.
      Let's assume we have the vector b you just created
      >> b=4:8:52
      ans =
        b = 4 12 20 28 36 44 52

      We can add the value 5 on the vector, as simple as this:
      >> c=b+2
      ans
        c = 9 17 25 33 41 49 57

      We can also add two vectors together, but only if they are the same dimensions (same length and both row or colomn vectors)
      >> a=b+c
      ans
        a = 13 29 45 61 77 93
    question: Write the command to calculate the difference between vectors c and b from the previous example and store it in variable 'a'
    type: commands
    evaluation: ['exist(''a'',''var'')','size(a,1)==1','size(a,2)==7','a==[5 5 5 5 5 5 5]']
    preeval: ['b=4:8:52','c=b+5']
    posteval: ['clear(''b'')','clear(''c'')','clear(''a'')']
Question6:
    background: |
      To avoid having to write a lot of complicated operations with vectors and matrices,
      MATLAB has a lot of builtin standard functions and constants that can be used to simplify things.
      Almost all trigonometric functions are available as builtin functions, such as the function of
      sine and cosine (sin(x) and cos(x) respectively). To use such a function, simply call the function
      by its name and insert a number as an argument. For example, to save the cosine of 45 degrees
      in a variable 'a' we can type this in the MATLAB command line:

      >> a = cos(pi/4)

      Notice that we need to provide the angle in radians. That is why we use the builtin constant 'pi'.
      You can also notice that we can do operations inside the brakets (division in this case), or we could
      even insert other functions as well.

      >> b = sin(asin(pi/4))

      In this case, we are calculating first the arcsine of pi/4 radians (45 degrees) and then we calculate
      the sine of this result.

      MATLAB has a very extensive library of builtin functions, which depends on which toolboxes are installed
      on your system. To know which functions exist is a matter of experience. If you want to know how
      to use a specific function, you can always use the 'help' command, followed by the name of the function

      >> help sin #Provides help on how to use the sin function
    question: Store in variable 'h' the arctan of: the sine of 45 degrees divided by the cosine of 45 degrees.
    type: commands
    evaluation: ['exist(''h'',''var'')'','h==pi/4']
    preeval: ['clear h']
    posteval: ['clear h']
Question7:
    background: |
      Plotting is a very good way to inspect a function or some results by visualising them and observing any existing trends.
      The most simple way to plot data is using a 2 dimensional (2D) plot, which plots a vector (e.g. x) against another vector (e.g. y)
      To do this, we simple use the 'plot' function and specifying the vectors that we want to use for plotting:

      >> plot(x,y)

      The vectors x and y should have been previously defined and they should have the same size (i.e. dimensions and lengths)

      A good example of visualisation is visualising the sine as a function of time. To do that, we first need to create a 't' vector representing the time
      and then calculate the sine for the specific values of time.

      >> t=0:0.25:7; y=sin(t); plot(t,y)

      Basic plotting is very easy in Matlab, and the plot command has extensive add-on capabilities. These capabilities include many functions such as:

      grid: Toggles a grid on and off the current figure
      axis: Controls axis scaling and appearance
      title('text'): Adds 'text' at the top of the current axis
      xlabel('text'): Labels the x-axis with 'text'
      ylabel('text'): Labels the y-axis with 'text'
      subplot: Creates axes in tiled positions
    question: Plot the line with function y=2*x+10 for x starting from 0 until 100 (in one line)
    type: commands
    evaluation: ['strcmp(questdlg(''Are the two figures the same?'',''Yes'',''No''),''Yes'')']
    preeval: ['x=0:100','y=2*x+10','h=figure','set(h,''Name'',''Correct plot'',''Position'',[0 200 560 420])','k=axes','plot(k,x,y)','g=figure','set(g,''Name'',''Your plot'',''Position'',[600 200 560 420])']
    posteval: ['close all']
Question11:
    background: |

    question: |
      Define a function 'my_multip' in a file with the same name. The function should take two
      arguments (numbers) and it should return one output with the result of the
      multiplication between the two numbers.
      Press enter when the file is ready
    type: commands
    evaluation: ['~isempty(s.file)','nargin(@my_multip)==2','my_multip(2,8)==16','my_multip(9,4)==36']
    preeval: ['rehash','s=functions(@my_multip)']
    posteval: ['clear(''s'')']
